{"version":3,"sources":["pages/Menu.jsx","pages/Hello.jsx","pages/Results.jsx","tests/TrailTest.jsx","App.js","serviceWorker.js","index.js"],"names":["Menu","props","state","Row","className","Col","sm","Card","body","CardTitle","CardText","Button","color","block","onClick","selectTest","Component","Hello","value","handleChange","bind","handleSubmit","event","this","setState","target","setUserId","console","info","goToPage","onSubmit","type","onChange","Results","stroopEvents","results","events","colours","words","start","lastTs","data","map","index","obj","word","colour","indexOf","toUpperCase","selected","selectedColor","outcome","elapsed","stamp","reaction","trailsEvents","token","correctToken","text","selectedToken","hybridEvents","correctWord","correctColour","coltext","selectedWord","selectedColour","titles","stroop","trails","hybrid","headers","label","key","date","Date","Table","header","Object","values","val","scope","filename","userId","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Spinner","goBack","TrailTest","progress","update","push","getTime","log","length","handleMiss","x","y","handleSuccess","prev","handleError","handleCompleted","stop","handleResults","undefined","part","feedback","errorText","errorDuration","completedText","onSuccess","onError","onMiss","onCompleted","i","App","sleep","ms","Promise","res","setTimeout","countdown","isLoading","test","selectedPage","page","Container","size","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bcc5f1f7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Card, Button, CardTitle, CardText, Row, Col } from \"reactstrap\";\n\nclass Menu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <Row className='d-flex justify-content-center'>\n        <Col sm=\"4\">\n          <Card body className=\"h-100\" >\n            <CardTitle className=\"h4\">Trail Test A</CardTitle>\n            <CardText>\n              The Trail Making Test is a neuropsychological test of visual\n              attention and task switching. It consists of two parts in which\n              the subject is instructed to connect a set of numbered dots as\n              quickly as possible while still maintaining accuracy.\n            </CardText>\n            <Row className=\"mt-auto\">\n              <Col>\n                <Button\n                  color=\"primary\"\n                  block\n                  onClick={() => this.props.selectTest(\"trailA\")}\n                >\n                  Play\n                </Button>\n              </Col>\n              <Col>\n                <Button color=\"secondary\" block>\n                  Instructions\n                </Button>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n        <Col sm=\"4\">\n          <Card body className=\"h-100\" >\n            <CardTitle className=\"h4\">Trail Test B</CardTitle>\n            <CardText>\n              The Trail Making Test is a neuropsychological test of visual\n              attention and task switching. It consists of two parts in which\n              the subject is instructed to connect a set of numbered dots as\n              quickly as possible while still maintaining accuracy.\n            </CardText>\n            <Row className=\"mt-auto\">\n              <Col>\n                <Button\n                  color=\"primary\"\n                  block\n                  onClick={() => this.props.selectTest(\"trailB\")}\n                >\n                  Play\n                </Button>\n              </Col>\n              <Col>\n                <Button color=\"secondary\" block>\n                  Instructions\n                </Button>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Menu;\n","import React, { Component } from \"react\";\n\nimport { Row } from \"reactstrap\";\n\nclass Hello extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n  handleSubmit(event) {\n    this.props.setUserId(this.state.value);\n    console.info(\"A name was submitted: \" + this.state.value);\n    this.props.goToPage(\"menu\");\n    // event.preventDefault();\n  }\n\n  render() {\n    return (\n      <Row className=\"d-flex justify-content-center\">\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Name:\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n      </Row>\n    );\n  }\n}\n\nexport default Hello;\n","import React, { Component } from \"react\";\n\nimport { Table, Button, Spinner } from \"reactstrap\";\n\nimport { CSVLink } from \"react-csv\";\n\nclass Results extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      titles: {\n        stroop: \"Stroop Results\",\n        trails: \"Trails Results\",\n        hybrid: \"Hybrid Test Results\",\n      },\n      headers: {\n        stroop: [\n          { label: \"Event\", key: \"event\" },\n          { label: \"Word\", key: \"word\" },\n          { label: \"Colour\", key: \"colour\" },\n          { label: \"Selected Colour\", key: \"selected\" },\n          { label: \"Outcome\", key: \"outcome\" },\n          { label: \"Time elapsed\", key: \"elapsed\" },\n          { label: \"Reaction time\", key: \"reaction\" },\n        ],\n        trails: [\n          { label: \"Event\", key: \"event\" },\n          { label: \"Token\", key: \"token\" },\n          { label: \"Selected Token\", key: \"selected\" },\n          { label: \"Outcome\", key: \"outcome\" },\n          { label: \"Time elapsed\", key: \"elapsed\" },\n          { label: \"Reaction time\", key: \"reaction\" },\n        ],\n        hybrid: [\n          { label: \"Event\", key: \"event\" },\n          { label: \"Correct Word\", key: \"correctWord\" },\n          { label: \"Correct Colour\", key: \"correctColour\" },\n          { label: \"Selected Word\", key: \"selectedWord\" },\n          { label: \"Selected Colour\", key: \"selectedColour\" },\n          { label: \"Outcome\", key: \"outcome\" },\n          { label: \"Time elapsed\", key: \"elapsed\" },\n          { label: \"Reaction time\", key: \"reaction\" },\n        ],\n      },\n      data: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.results.type === \"stroop\") {\n      this.stroopEvents(this.props.results.data);\n    } else if (this.props.results.type === \"trails\") {\n      this.trailsEvents(this.props.results.data);\n    } else if (this.props.results.type === \"hybrid\") {\n      this.hybridEvents(this.props.results.data);\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({ data: null });\n  }\n\n  stroopEvents = (results) => {\n    const { events, colours, words, start } = results;\n    let lastTs = start;\n\n    const data = events.map((event, index) => {\n      let obj = {\n        event: index + 1,\n        word: event.word,\n        colour: words[colours.indexOf(event.color)].toUpperCase(),\n        selected: words[colours.indexOf(event.selectedColor)].toUpperCase(),\n        outcome: event.type,\n        elapsed: (event.stamp - start) / 1000,\n        reaction: (event.stamp - lastTs) / 1000,\n      };\n      lastTs = event.stamp;\n\n      return obj;\n    });\n\n    this.setState({ data });\n  };\n\n  trailsEvents = (results) => {\n    const { events, start } = results;\n    let lastTs = start;\n\n    const data = events.map((event, index) => {\n      let obj = {\n        event: index + 1,\n        token: event.correctToken.text,\n        selected: event.selectedToken.text,\n        outcome: event.type,\n        elapsed: (event.stamp - start) / 1000,\n        reaction: (event.stamp - lastTs) / 1000,\n      };\n      lastTs = event.stamp;\n\n      return obj;\n    });\n\n    this.setState({ data });\n  };\n\n  hybridEvents = (results) => {\n    const { events, start } = results;\n    let lastTs = start;\n\n    const data = events.map((event, index) => {\n      let obj = {\n        event: index + 1,\n        correctWord: event.correctToken.text,\n        correctColour: event.correctToken.coltext,\n        selectedWord: event.selectedToken.text,\n        selectedColour: event.selectedToken.coltext,\n        outcome: event.type,\n        elapsed: (event.stamp - start) / 1000,\n        reaction: (event.stamp - lastTs) / 1000,\n      };\n      lastTs = event.stamp;\n\n      return obj;\n    });\n\n    this.setState({ data });\n  };\n\n  render() {\n    //const {date } = this.state;\n    const date = new Date();\n    return (\n      <div>\n        <h3 className=\"mb-3\">\n          {this.props.results\n            ? this.state.titles[this.props.results.type]\n            : \"Results\"}\n        </h3>\n        <Table>\n          <thead>\n            <tr>\n              {this.state.headers[this.props.results.type].map((header) => {\n                return <th key={header.key}>{header.label}</th>;\n              })}\n            </tr>\n          </thead>\n          {this.state.data ? (\n            <tbody>\n              {this.state.data.map((event) => {\n                return (\n                  <tr key={event.event}>\n                    {Object.values(event).map((val, index) => {\n                      if (index === 0) {\n                        return (\n                          <th scope=\"row\" key={index}>\n                            {val}\n                          </th>\n                        );\n                      } else {\n                        return <td key={index}>{val}</td>;\n                      }\n                    })}\n                  </tr>\n                );\n              })}\n            </tbody>\n          ) : null}\n        </Table>\n        <div className=\"mb-2\">\n          {this.state.data ? (\n            <CSVLink\n              data={this.state.data}\n              headers={this.state.headers[this.props.results.type]}\n              filename={`${\n                this.props.userId\n              }_${date.getFullYear()}-${date.getMonth()}-${date.getDate()}_${date.getHours()}-${date.getMinutes()}-${date.getSeconds()}.csv`}\n              className=\"btn btn-primary btn-lg\"\n              target=\"_blank\"\n            >\n              Download CSV\n            </CSVLink>\n          ) : (\n            <Spinner />\n          )}\n        </div>\n\n        <Button onClick={this.props.goBack} color=\"secondary\" className=\"mb-3\">\n          Go Back\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Results;\n","import React from \"react\";\nimport { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Trails from \"@danisnowman/react-neuropsych-trails\";\n\nclass TrailTest extends Component {\n  static propTypes = {\n    part: PropTypes.string.isRequired,\n  };\n\n  state = {\n    progress: 0,\n  };\n\n  constructor(props) {\n    super(props);\n    this.data = {\n      start: undefined,\n      stop: undefined,\n      events: [],\n    };\n  }\n\n  componentDidMount() {\n    this.data.start = new Date().getTime();\n  }\n\n  update = (type, date, correctToken, selectedToken) => {\n    this.data.events.push({\n      stamp: date.getTime(),\n      type: type,\n      correctToken: correctToken,\n      selectedToken: selectedToken,\n    });\n    console.log(this.data.events[this.data.events.length - 1]);\n  };\n\n  handleMiss = (date, correctToken, x, y) => {\n    this.update(\"Miss\", date, correctToken, { text: \"\", x: x, y: y });\n  };\n\n  handleSuccess = (date, token) => {\n    this.update(\"Success\", date, token, token);\n    this.setState((prev) => ({ progress: prev.progress + 1 }));\n  };\n\n  handleError = (date, correctToken, selectedToken) => {\n    this.update(\"Error\", date, correctToken, selectedToken);\n  };\n\n  handleCompleted = (date) => {\n    this.data.stop = date.getTime();\n    console.log(\"Trails Data:\");\n    console.log(this.data);\n\n    this.props.handleResults({ results: { data: this.data, type: \"trails\" } });\n  };\n\n  render() {\n    return (\n      <Trails\n        part={this.props.part}\n        progress={this.state.progress}\n        feedback={true}\n        errorText=\"X\"\n        errorDuration={500}\n        completedText={\"Completed! Please press the view results button\"}\n        onSuccess={this.handleSuccess}\n        onError={this.handleError}\n        onMiss={this.handleMiss}\n        onCompleted={this.handleCompleted}\n      />\n    );\n  }\n}\n\nexport default TrailTest;\n","import React from \"react\";\nimport { Component } from \"react\";\n\nimport Menu from \"./pages/Menu\";\nimport Hello from \"./pages/Hello\";\nimport Results from \"./pages/Results\";\n\nimport TrailTest from \"./tests/TrailTest\";\n\nimport \"./App.css\";\nimport { Container, Card, CardBody, Button } from \"reactstrap\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedPage: \"hello\",\n      isLoading: false,\n      countdown: null,\n      results: null,\n      userId: null,\n    };\n  }\n\n  sleep = (ms) => new Promise((res) => setTimeout(res, ms));\n\n  countdown = async () => {\n    this.setState({ isLoading: true, countdown: 3 });\n    await this.sleep(1000);\n    this.setState({ countdown: 2 });\n    await this.sleep(1000);\n    this.setState({ countdown: 1 });\n    await this.sleep(1000);\n    this.setState({ isLoading: false, countdown: 0 });\n  };\n\n  selectTest = (test) => {\n    this.countdown();\n    this.setState({ selectedPage: test });\n  };\n\n  goBack = () => {\n    this.setState({ selectedPage: \"menu\", results: null });\n  };\n\n  goToPage = (page) => {\n    this.setState({ selectedPage: page });\n  };\n\n  handleResults = (results) => {\n    this.setState(results);\n  };\n\n  setUserId = (userId) => {\n    this.setState({ userId: userId });\n  };\n\n  componentDidMount() {\n    //this.countdown();\n  }\n\n  render() {\n    const { isLoading, countdown, selectedPage, results, userId } = this.state;\n\n    if (isLoading) {\n      return (\n        <div className=\"loading\">\n          <div className=\"loading-centre\">\n            <h1 className=\"display-1 text-center\">{countdown}</h1>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Container className=\"text-center\">\n        <div className=\"mb-5\">\n          <h1 className=\"display-3\">TMT Pau</h1>\n        </div>\n\n        {results ? (\n          <Button\n            userId={this.userId}\n            size=\"lg\"\n            color=\"primary\"\n            className=\"mb-3\"\n            onClick={() => this.goToPage(\"results\")}\n          >\n            View Results\n          </Button>\n        ) : null}\n        {selectedPage === \"hello\" ? (\n          <Hello goToPage={this.goToPage} setUserId={this.setUserId} />\n        ) : null\n        }\n\n        {selectedPage === \"menu\" ? (\n          <Menu selectTest={this.selectTest} />\n        ) : (\n          <Card\n            className={`test-card mx-auto ${selectedPage === \"results\" ? \"border-0\" : null\n              }`}\n          >\n            <CardBody>\n              {selectedPage === \"trailA\" ? (\n                <TrailTest part=\"A12\" handleResults={this.handleResults} />\n              ) : null}\n              {selectedPage === \"trailB\" ? (\n                <TrailTest part=\"B\" handleResults={this.handleResults} />\n              ) : null}\n              {selectedPage === \"results\" ? (\n                <Results results={results} goBack={this.goBack} userId={userId} />\n              ) : null}\n            </CardBody>\n          </Card>\n        )}\n        {selectedPage === \"menu\" ? (\n          <p className=\"text-monospace text-center mt-3 text-muted\">v0.0.1</p>\n        ) : null}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}